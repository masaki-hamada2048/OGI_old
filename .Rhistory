devtools::load_all(".")
ls()
devtools::use_package("lpsolve")
install.packages("lpsolve")
install.packages("lpSolve")
devtools::use_package("lpSolve")
devtools::use_package("ade4", "Suggests")
install.packages("ade4")
install.packages("bnlearn")
devtools::use_package("ade4", "Suggests")
devtools::use_package("bnlearn", "Suggests")
packageVersion("lpSolve")
packageVersion("ade4")
packageVersion("bnlearn")
devtools::use_mit_license()
devtools::load_all(".")
demo1()
demo2
demo2()
demo3()
demo4()
demo4()
q
q()
devtools::load_all(".")
le
devtools::load_all(".")
devtools::load_all(".")
?plot
?cov
devtools::use\_package("stats")
devtools::use_package("stats")
devtools::use_package("graphics")
?sd
?segments
devtools::load_all(".")
?read.table
?text
?USJudgeRatings
?cor
?par
?matplot
?USJudgeRatings
?par
?pbinom
?show
?curve
?X
??x
?iis
?iris
_data
?data
?olympic
?dev.copy2eps
?data
?marks
devtools::load_all(".")
devtools::use_package("methods")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
packageVersion("stats")
packageVersion("graphics")
packageVersion("methods")
packageVersion("methods")
packageVersion("lpSolve")
?lp
?plot
?cov
?sum
?%*%
?dot
?lp
?cov2weight
?cov2weight
?cov2weight
?cov2biu
devtools::load_all(".")
?ogi
devtools::load_all(".")
X = matrix(1:8,2,4)
ogi(X)
X = matrix(1:8,2,4)
X = t(X) %*% X
X
ogi(X)
x = matrix(1:8,2,4)
X
x <- matrix(1:8,2,4)
x
x <- matrix(1:16,4,4)
rank(X)
det(X)
X
x
det(x)
x <- x + eye(4)
x <- x + diag(4)
x
det(x)
x <- t(x) %*% x
x
det(x)
ogi(x)
demo1()
ogi(x)
mineig(x)
eigen(x)
eigen(t(x)%*%x)
x <- matrix(rep(1,4),2,2)
x
x = x + diag(2)
x
ogi(x)
eig(t(X)%*%x)
eigen(t(X)%*%x)
eigen(t(X) %*% x)
x
t(x)
eigen(t(x) %*% x)
x = x - matrix(rep(1.5,4),2,2)
x
eign(x %*% x)
eigen(x %*% x)
x = 1:10
x = 1:10
ogi(x)
devtools::load_all(".")
demo2
demo2()
demo3()
demo3(p=5)
devtools::load_all(".")
?lp
?glm
?ogi
devtools::load_all(".")
?ogi
?ogi
?cov2weight
?cov2biu
?ogi
?ogi
devtools::load_all(".")
?ogi
?ogi
devtools::load_all(".")
devtools::load_all(".")
demo5()
devtools::load_all(".")
devtools::load_all(".")
demo5()
devtools::load_all(".")
?ogi
CT = matrix(c(
2,1,1,0,0,
8,3,3,0,0,
0,2,1,1,1,
0,0,0,1,1,
0,0,0,0,1), 5, 5, byrow=TRUE)
X = matrix(0, 0, 2)
for(i in 1:5){
for(j in 1:5){
if(CT[i,j]>0){
X = rbind(X, matrix(c(6-i,6-j), CT[i,j], 2, byrow=TRUE))
}
}
}
ogi(X)
?ogi
devtools::load_all(".")
devtools::load_all(".")
packageVersion("R")
devtools::build_win()
?ogi
X=matrix(1:6,2,3)
X
X=matrix(1:6,3,2)
X
ogi(X)
ogi(X, force=TRUE)
?cov2weight
devtools::load_all(".")
devtools::load_all(".")
cov2weight(X)
cov2weight(t(X)%*%X)
ogi(X)
Y=t(X)%*%X
Y
det(Y)
ogi(Y)
cov2weight(Y)
f = ordered(1:10)
f[sample(1:10, 20, replace=TRUE)]
Y = ogi(f)$value
graphics::plot((1:n)/(n+1), Y, type="b")
xs = (1:1000)/1001
graphics::points(xs, stats::qnorm(xs), type="l", col="red")
f = ordered(1:10)
f[sample(1:10, 20, replace=TRUE)]
Y = ogi(f)$value
graphics::plot((1:10)/(10+1), Y, type="b")
xs = (1:1000)/1001
graphics::points(xs, stats::qnorm(xs), type="l", col="red")
S = matrix(0, 5, 5)
S[1,1] = 1
for(j in 2:5) S[1,j] = S[j,1] = -0.5
for(i in 2:5){
for(j in 2:5){
if(i == j) S[i,j] = 1
else S[i,j] = 0.5
}
}
weight=cov2weight(S)
S
weight
CT = matrix(c(
2,1,1,0,0,
8,3,3,0,0,
0,2,1,1,1,
0,0,0,1,1,
0,0,0,0,1), 5, 5, byrow=TRUE)
X = matrix(0, 0, 2)
for(i in 1:5){
for(j in 1:5){
if(CT[i,j]>0){
X = rbind(X, matrix(c(6-i,6-j), CT[i,j], 2, byrow=TRUE))
}
}
}
X0 = X
X = as.data.frame(X0)
X[,1] = factor(X0[,1], ordered=TRUE)
X[,2] = factor(X0[,2], ordered=TRUE)
ogiX = ogi(X)
graphics::par(pty="s", cex=1.7, mar=c(4.5,3,1,1))
graphics::plot(ogiX$scaled, xlim=c(-3,3), ylim=c(-3,3), xlab="Geometry", ylab="Probability")
for(t in 1:nrow(ogiX$scaled)){
xy = ogiX$scaled[t,]
g = rep(sum(xy)/2, 2)
graphics::segments(xy[1], xy[2], g[1], g[2], lty=2)
}
graphics::arrows(-3, -3, 3, 3)
graphics::text(2.5, 2, "OGI/2")
ogiX
p = stats::pbinom(0:(10-1), 10, 0.5) # binomial
#' S = matrix(0, 10, 10)
#' for(i in 1:10){
#'   for(j in 1:10){
#'     k = min(i,j)
#'     S[i,j] = p[k] - p[i] * p[j]
#'   }
#' }
#' methods::show(S)
#' methods::show(eigen(S))
#' d = cov2weight(S)
#' e = sqrt(diag(S))
#' graphics::plot(c(0, cumsum(e)), (c(0, cumsum(d)) - sum(d)/2)/sqrt(10), ylim=c(-3,3))
#' d
p = stats::pbinom(0:(10-1), 10, 0.5) # binomial
S = matrix(0, 10, 10)
for(i in 1:10){
for(j in 1:10){
k = min(i,j)
S[i,j] = p[k] - p[i] * p[j]
}
}
methods::show(S)
methods::show(eigen(S))
d = cov2weight(S)
e = sqrt(diag(S))
graphics::plot(c(0, cumsum(e)), (c(0, cumsum(d)) - sum(d)/2)/sqrt(10), ylim=c(-3,3))
d
devtools::load_all(".")
devtools::use_testthat()
devtools::load_all(".")
devtools::test_that()
testthat::test_that()
?expect_output
